local int base;

typedef struct 
{
    local int chunk = 0;
	int ofd1;
	int used;
	int ofd2;
} list<read=readlist>;

typedef struct 
{
	local int chunk = -1;
	local int n = -1;
	short flags;
	short type;
	float height1;
	float height2;
	char xoff;
	char yoff;
	char w;
	char h;
	int of2a;
	int of2b;
} D1<read=readD1>;

typedef struct 
{
	local int chunk = -1;
	local int n = -1;
	char a[8];
	char b[8];
} D2<read=readD2>;

string readlist(list &o) {
	string s;

/*    o.ofd1 = 0xc00 + 0x79*o.chunk;
    o.ofd2 = 0xc18 + 0x79*o.chunk;
    o.used = 1;*/

	SPrintf( s, "[%i] %i - x%x, x%x",o.chunk, o.used, o.ofd1, o.ofd2);
	return s;
}

string readD1(D1 &o) {
	string s;

/*	o.flags = 2;
	o.type = 2;
	o.height1 = 0.0f;
	o.height2 = 0.0f;
	o.xoff = 0;
	o.yoff = 0;
	o.w = 8;
	o.h = 8;
	o.of2a = 0;
	o.of2b = 0xc28 + o.chunk * 0x79;*/

	SPrintf( s, "[%i, %i] %i (%i) - x%x, x%x", o.chunk, o.n,o.flags, o.type, o.of2a, o.of2b);
	return s;
}

string readD2(D2 &o) {
	string s;

/*    o.a = "\xFF\xFF\xFF\xFF\xFF\xFF\xFF";
    o.a[7] = 0xFF;
    o.b[0] = 0;
    o.b[1] = 0;
    o.b[2] = 0;
    o.b[3] = 0;
    o.b[4] = 0;
    o.b[5] = 0;
    o.b[6] = 0;
    o.b[7] = 0;*/
	     
	SPrintf( s, "[%i, %i] %s (%s)", o.chunk, o.n, o.a, o.b);
	return s;
}

typedef struct
{
	local int i;
    local int k;
	local int j=0;
	for(i=0; i<256; i++)
	{
		for(k=0; k<lis[i].used;k++)
		{
			FSeek( lis[i].ofd1 + base + k*0x18 );
			D1 entries;
			entries[j].chunk = i;
			entries[j].n = k+1;
			j++;
		}
	}
} data1;

typedef struct
{
local int temp = FTell();
	local int i;
    local int k;
	local int j=0;
	for(i=0; i<256; i++)
	{
		for(k=0; k<lis[i].used;k++)
		{
			FSeek( lis[i].ofd2 + base + k*0x10);
			D2 entries;
			entries[j].chunk = i;
			entries[j].n = k+1;
			j++;
		}
	}
FSeek(temp);
} data2;

typedef struct
{
local int temp = FTell();
	local int i;
    local int k;
	local int j = 0;
	for(i=0; i<256; i++)
	{
		for(k=0; k<lis[i].used;k++)
		{
			if(D1_.entries[j].of2a != 0)
			{
				FSeek( D1_.entries[j].of2a + base );
				typedef struct
				{
					local int chunk = i;
					local int rows = D1_.entries[j].h;
			        local int n = k+1;
					char a[D1_.entries[j].h];
				} bitmap<read=readBM>;
				bitmap BM;
			}
            else
			{
				typedef struct
				{
					local int chunk = i;
					local int rows = D1_.entries[j].h;
			        local int n = k+1;
				} bitmap_empty<read=readBM_empty>;
				bitmap_empty BM;
			}

			j++;
		}
	}
FSeek(temp);
} data2a;

typedef struct
{
local int temp = FTell();
	local int i;
    local int k;
	local int j = 0;
	for(i=0; i<256; i++)
	{
		for(k=0; k<lis[i].used;k++)
		{
			if(D1_.entries[j].of2b != 0)
			{
				FSeek( D1_.entries[j].of2b + base );
				typedef struct
				{
					local int chunk = i;
					local int rows = D1_.entries[j].h;
					local int cols = D1_.entries[j].w;
					local int n = k+1;
					
					if (D1_.entries[j].type != 2)
					    float map[(cols+1)*(rows+1)];
					char info[(cols+1)*(rows+1)];
				} heights<read=readH>;
				heights H1;
			}
			j++;
		}
	}
FSeek(temp);
} data2b;

typedef struct
{
local int temp = FTell();
local int i;
    FSeek( base );
for(i = 0; i<256;i++)
{
    list lis;
    lis[i].chunk = i;
}
    data1 D1_;
    data2 D2_;
    
    data2a D2a;
    data2b D2b;
FSeek( temp );
} MH2O;

string readH(heights &o) {
	string s;
    int i;

/*    for(i = 0; i <(o.rows+1)*(o.cols+1);i++)
    {
        o.info[i] = i;
    }*/

	SPrintf( s, "[%i, %i] %i x %i", o.chunk, o.n, o.rows, o.cols);
	return s;
}

string readBM(bitmap &o) {
	string s;
	SPrintf( s, "[%i, %i] %s", o.chunk, o.n, o.a);
	return s;
}
string readBM_empty(bitmap_empty &o) {
	string s;
	SPrintf( s, "[%i, %i] full", o.chunk, o.n);
	return s;
}


//-----------------------------------------------------
//--- 010 Editor v3.0.2 Binary Template
//
// File:        WoWADT.bt
// Authors:     ganku      (ganku.caelestis@gmail.com)
//              you         (your.e-m@ail.com)
// Revision:    0.2        2008-Sep-21
// Purpose:     Quick overfiew for ADT files
//
//  Tree:
//          Global constands
//      1.  Basic Types
//      2.  Chunk Def.
//      3.  ADT File
//      4.  Global Functions
//-----------------------------------------------------

// colors for special puposes
local int cOffset = cLtYellow;
local int cFileName = cLtAqua;
local int cVector = cLtPurple;

/*******************************************************
 *  1.  BASIC TYPES
*******************************************************/

// basic chunk structure
//--------------------------------------------------
typedef struct {
    // always important to know!
    local uint32 myOffset = FTell();
    local uint32 myDataStart = myOffset + 8;

    // color
    SetColor( cWhite, cDkRed );

    // magic value
    char magic[4];

    // color #2
    SetColor( cBlack, 0x99CCFF );
    
    // data size
    uint32 byte_size;

    // normal color plz
    SetStdColor();
} _chunk <read=chunkGetMagic>;

    // displays the magic and the size of this chunk
    string chunkGetMagic(_chunk &c) {
        string s;
        SPrintf( s, 
            "%c%c%c%c: %i Byte", 
            c.magic[3], c.magic[2], c.magic[1], c.magic[0], c.byte_size
        ); 
        return s;
    };



// offset including features
//--------------------------------------------------
typedef struct {
    // we store this value for calculations
    local uint32 upperChunkOffset = 0;

    SetColor( cBlack, cOffset );
    
    UINT32 adress   <format=hex>;
    
    SetStdColor();
}offset <read=offsetGetADR>;

    // displays where this pointer is pointing to
    string offsetGetADR(offset &o) {
        string s;
        // just an offset ?
        if(o.upperChunkOffset==0) {
            SPrintf( s, "+ %i Byte", o.adress);
        }
        // global offset
        else {
            // zero?
            if(o.adress==0) return "- unused - ";
            SPrintf( s, "-> 0x%02X", o.adress+o.upperChunkOffset);
        }
        return s;
    }


// filename - ... because 010 want it so
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cFileName );
   
    string value;

    SetStdColor();
} filename <read=filenameRead>;
    
    string filenameRead(filename &f) {
        return f.value;
    };


// Vector3D
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cVector );
   
    float x, y, z;

    SetStdColor();
} Vector3D;



/*******************************************************
 *  2.  Chunk Def.
*******************************************************/

// MVER - Versions Header
//--------------------------------------------------
typedef struct {
        _chunk hdr;
        unsigned byte version[4] <format=hex>;
} MVER;


// MHDR - ADT Offset Collection
//--------------------------------------------------
typedef struct {
        _chunk hdr;
          offset pad;
            pad.upperChunkOffset = hdr.myDataStart;
          offset offsInfo;
            offsInfo.upperChunkOffset = hdr.myDataStart;
          offset offsTex;
            offsTex.upperChunkOffset = hdr.myDataStart;		
          offset offsModels;		
            offsModels.upperChunkOffset = hdr.myDataStart;
          offset offsModelsIds;
		     offsModelsIds.upperChunkOffset = hdr.myDataStart;
          offset offsMapObjects;
		    offsMapObjects.upperChunkOffset = hdr.myDataStart;
          offset offsMapObjectsIds;
		    offsMapObjectsIds.upperChunkOffset = hdr.myDataStart;
          offset offsDoodsDef;
		    offsDoodsDef.upperChunkOffset = hdr.myDataStart;
          offset offsObjectsDef;	
            offsObjectsDef.upperChunkOffset = hdr.myDataStart;
          offset offsFlightBoundary; // tbc, wotlk	
            offsFlightBoundary.upperChunkOffset = hdr.myDataStart;
          offset offsMH2O; // new in WotLK
            offsMH2O.upperChunkOffset = hdr.myDataStart;
          offset pad3;
            pad3.upperChunkOffset = hdr.myDataStart;
          offset pad4;
            pad4.upperChunkOffset = hdr.myDataStart;		
          offset pad5;
            pad5.upperChunkOffset = hdr.myDataStart;		
          offset pad6;
            pad6.upperChunkOffset = hdr.myDataStart;		
          offset pad7;
            pad7.upperChunkOffset = hdr.myDataStart;
} MHDR;


// MCIN - MCNK Offsets
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cOffset );
    uint32 adress;
    SetStdColor();

    uint32 size;
    uint32 flags;
    uint32 asyncID;
} MCIN_Entry<read=mchinEntryRead>;
    
    // shows where we point, too.
    string mchinEntryRead(MCIN_Entry &o) {
        string s;
        if(o.adress==0) return "ERROR!!";
        
        SPrintf( s, "-> 0x%02X", o.adress);
        return s;
    }


typedef struct {
    _chunk hdr;
    MCIN_Entry entries[256];
} MCIN;


// fileList - Used for any kind of file lists
// Its unordered with unknown number of items
// MTEX, MMDF, MWMO
//--------------------------------------------------
typedef struct { 
    _chunk hdr;
    local int i=0;

    if(hdr.byte_size!=0) {
        // catch texture files
        while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
            filename texture;
            i++;
        }
    }
} fileList<read=readFileList>;
    
    // how many?
    string readFileList(fileList &o) {
        string s;
        SPrintf( s, "%i Files", o.i);
        return s;
    }


// offsList - List of many Offsets
// MMID, MWID
//--------------------------------------------------
typedef struct {
    _chunk hdr;
    
    local int i;
    for(i=0; (i*sizeof(uint32))<hdr.byte_size; i++)
        offset offs;
} offsList<read=readOffsList>;

    // how many?
    string readOffsList(offsList &o) {
        string s;
        SPrintf( s, "%i Offsets", o.i);
        return s;
    }    


// MDDF - Doodad placement infomations 
//--------------------------------------------------
typedef struct {
    uint32 nameID;
    uint32 uniqueID;
    Vector3D pos;
    Vector3D rotation;
    uint16 scale;
    uint16 flags;
} MDDF_Entry<read=readaloha>;

string readaloha(MDDF_Entry &o)
{
string s;
SPrintf(s, "%i", o.uniqueID);
return s;
}
typedef struct {
    uint32 nameID;
    uint32 uniqueID;
    Vector3D pos;
    Vector3D rotation;
    Vector3D lower;
    Vector3D upper;
    uint32 set;
    uint32 name;
} MODF_Entry<read=readaloha2>;

string readaloha2(MODF_Entry &o)
{
string s;
/*o.lower.x = o.pos.x - 1;
o.lower.y = o.pos.y - 1;
o.lower.z = o.pos.z - 1;
o.upper.x = o.pos.x + 1;
o.upper.y = o.pos.y + 1;
o.upper.z = o.pos.z + 1;*/
SPrintf(s, "%i", o.nameID);
return s;
}

typedef struct {
    _chunk hdr;

    local int i;
    for(i=0; (i*36)<hdr.byte_size; i++)
        MDDF_Entry entry;
} MDDF<read=readMDDFList>;
 
    // how many?
    string readMDDFList(MDDF &o) {
        string s;
        SPrintf( s, "%i Models appear", o.i);
        return s;
    }

typedef struct {
    _chunk hdr;

    local int i;
    for(i=0; (i*64)<hdr.byte_size; i++)
        MODF_Entry entry;
} MODF<read=readMODFList>;
 
    // how many?
    string readMODFList(MODF &o) {
        string s;
        SPrintf( s, "%i WMOs appear", o.i);
        return s;
    }

// MCNK

typedef struct  // 03-29-2005 By ObscuR
{
    _chunk hdr;

/*000h*/  UINT32 flags;
/*004h*/  UINT32 IndexX;
/*008h*/  UINT32 IndexY;
/*00Ch*/  UINT32 nLayers;
/*010h*/  UINT32 nDoodadRefs;
/*014h*/  UINT32 offsHeight;
/*018h*/  UINT32 offsNormal;
/*01Ch*/  UINT32 offsLayer;
/*020h*/  UINT32 offsRefs;
/*024h*/  UINT32 offsAlpha;
/*028h*/  UINT32 sizeAlpha;
/*02Ch*/  UINT32 offsShadow;
/*030h*/  UINT32 sizeShadow;
/*034h*/  UINT32 areaid;
/*038h*/  UINT32 nMapObjRefs;
/*03Ch*/  UINT32 holes;
/*040h*/  UINT16 unk1;
/*040h*/  UINT16 unk2;
/*044h*/  UINT32 unk3;
/*048h*/  UINT32 unk4;
/*04Ch*/  UINT32 unk5;
/*050h*/  UINT32 predTex;
/*054h*/  UINT32 noEffectDoodad;
/*058h*/  UINT32 offsSndEmitters;
/*05Ch*/  UINT32 nSndEmitters;
/*060h*/  UINT32 offsLiquid;
/*064h*/  UINT32 sizeLiquid;
/*068h*/  float  pos[3];
/*06Ch*/  
/*070h*/ 
/*074h*/  UINT32 textureId;
/*078h*/  UINT32 props;
/*07Ch*/  UINT32 effectId;
/*080h*/
} SMChunk<read=readSMChunk>;
 

// DELETE MCLQ : uncomment
    // how many?
    string readSMChunk(SMChunk &o) {
        string s;
   //     o.flags = 1;
   //     o.offsLiquid = 0;
    //    o.sizeLiquid = 0;
        SPrintf( s, "%x", o.flags);
        return s;
    };

typedef struct
{
local int i;
    for(i=0; i<256; i++)
    {
        FSeek( mcin.entries[i].adress );
        SMChunk entry;
    }
} MCNK_list;
/*******************************************************
 *  3.  ADT File
*******************************************************/
struct ADTFile {
        MVER mver;  // version

        MHDR mhdr;  // header - all offsets
        MCIN mcin;  // field offsets

        fileList mtex;  // texture files

        fileList mmdx;  // model files
        offsList mmid;  // str offsets

        fileList mwmo;  // obj files
        offsList mwid;  // str offsets

        MDDF mddf;      // model placements
        MODF modf;      // model placements

MCNK_list MCNKs;
if(mhdr.offsMH2O.adress != 0)
{
base = mhdr.offsMH2O.adress+mhdr.offsMH2O.upperChunkOffset+8;
MH2O water;
}
} adt_file;



/*******************************************************
 *  4. Helpers
*******************************************************/
    
    // im soo lazy
void SetStdColor() {
    SetColor( cBlack, cWhite );
}