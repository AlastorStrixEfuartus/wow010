//-----------------------------------------------------
//--- 010 Editor v3.0.2 Binary Template
//
// File:        WoWWMO.bt
// Authors:     ganku      (ganku.caelestis@gmail.com)
//              you         (your.e-m@ail.com)
// Revision:    0.2        2008-Sep-21
// Purpose:     Quick overfiew for WMO files
//
//  Tree:
//          Global constands
//      1.  Basic Types
//      2.  Chunk Def.
//      3.  WMO File
//      4.  Global Functions
//-----------------------------------------------------

// colors for special puposes
local int cOffset = cLtYellow;
local int cFileName = cLtAqua;
local int cVector = cLtPurple;

/*******************************************************
 *  1.  BASIC TYPES
*******************************************************/

typedef union {
    UBYTE   byteValues[4];
    UINT32  intValue;
} unkown;


// basic chunk structure
//--------------------------------------------------
typedef struct {
    // always important to know!
    local uint32 myOffset = FTell();
    local uint32 myDataStart = myOffset + 8;

    // color
    SetColor( cWhite, cDkRed );

    // magic value
    char magic[4];

    // color #2
    SetColor( cBlack, 0x99CCFF );
    
    // data size
    uint32 byte_size;

    // normal color plz
    SetStdColor();
} _chunk <read=chunkGetMagic>;

    // displays the magic and the size of this chunk
    string chunkGetMagic(_chunk &c) {
        string s;
        SPrintf( s, 
            "%c%c%c%c: %i Byte", 
            c.magic[3], c.magic[2], c.magic[1], c.magic[0], c.byte_size
        ); 
        return s;
    };


// unknown chunk - yes! Whenever we dont know anything!
//--------------------------------------------------
typedef struct {
    local int i=0;
    _chunk hdr;
    while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
        unkown value;
        i++;
    }
} unk_chunk<read=uChunkGetMagic>;
        string uChunkGetMagic(unk_chunk &c) {
        string s;
        SPrintf( s, 
            "%c%c%c%c: %i Byte", 
            c.hdr.magic[3], c.hdr.magic[2], c.hdr.magic[1], 
            c.hdr.magic[0], c.hdr.byte_size
        ); 
        return s;
    };


// offset including features
//--------------------------------------------------
typedef struct {
    // we store this value for calculations
    local uint32 upperChunkOffset = 0;

    SetColor( cBlack, cOffset );
    
    UINT32 adress   <format=hex>;
    
    SetStdColor();
}offset <read=offsetGetADR>;

    // displays where this pointer is pointing to
    string offsetGetADR(offset &o) {
        string s;
        // just an offset ?
        if(o.upperChunkOffset==0) {
            SPrintf( s, "+ %i Byte", o.adress);
        }
        // global offset
        else {
            // zero?
            if(o.adress==0) return "- unused - ";
            SPrintf( s, "-> 0x%02X", o.adress+o.upperChunkOffset);
        }
        return s;
    }


// filename - ... because 010 want it so
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cFileName );
   
    string value;

    SetStdColor();
} filename <read=filenameRead>;
    
    string filenameRead(filename &f) {
        return f.value;
    };


// paddedFilename - filename + padding like in wmo
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cFileName );
   
    string value;

    SetColor( cWhite, cWhite );

    // padding
    while(nextChar()==0) {
        byte padding;
        while(FTell()%4) byte padding;
    }

    SetStdColor();
} paddedFilename<read=paddedFilenameRead>;
    string paddedFilenameRead(paddedFilename &f) {
        return f.value;
    };


// Vector3D
//--------------------------------------------------
typedef struct {
    SetColor( cBlack, cVector );
   
    float x, y, z;

    SetStdColor();
} Vector3D;


// RGB
//--------------------------------------------------
typedef struct {
    ubyte   r;
    ubyte   g;
    ubyte   b;
} rgb<read=rgbRead>;
    // display the color a bit more nice
    string rgbRead(rgb &f) {
        local string s;
        SPrintf( s, "#%02X%02X%02X", f.r, f.g, f.b);
        return s;
    };

// fileList - Used for any kind of file lists
// Its unordered with unknown number of items
// MTEX, MMDF, MWMO
//--------------------------------------------------
typedef struct { 
    _chunk hdr;
    local int i=0;

    if(hdr.byte_size!=0) {
        // catch texture files
        while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
            filename texture;
            i++;
        }
    }
} fileList<read=readFileList>;
    
    // how many?
    string readFileList(fileList &o) {
        string s;
        SPrintf( s, "%i Files", o.i);
        return s;
    }


// Its unordered with unknown number of items
// MOTX
//--------------------------------------------------
typedef struct { 
    _chunk hdr;
    local int i=0;

    if(hdr.byte_size!=0) {
        // catch texture files
        while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
            paddedFilename texture;
            i++;
        }
    }
} paddedFileList<read=paddedFileListRead>;
    
    // how many?
    string paddedFileListRead(paddedFileList &o) {
        string s;
        SPrintf( s, "%i Files", o.i);
        return s;
    }


// offsList - List of many Offsets
// MMID, MWID
//--------------------------------------------------
typedef struct {
    _chunk hdr;
    
    local int i;
    for(i=0; (i*sizeof(uint32))<hdr.byte_size; i++)
        offset offs;
} offsList<read=readOffsList>;

    // how many?
    string readOffsList(offsList &o) {
        string s;
        SPrintf( s, "%i Offsets", o.i);
        return s;
    }    


/*******************************************************
 *  2.  Chunk Def.
*******************************************************/

// MVER - Versions Header
//--------------------------------------------------
typedef struct {
    _chunk hdr;
    unsigned byte version[4] <format=hex>;
} MVER;


// MOHD - Versions Header
//--------------------------------------------------
typedef struct {
    _chunk hdr;
    uint32  nTextures;  // number of textures (BLP Files)
    uint32  nGroups;    // number of WMO groups
    uint32  nPortals;   // number of portals
    uint32  nLights;    // number of lights
    uint32  nModels;    // number of M2 models imported
    uint32  nDoodads;   // number of doodads (M2 instances)
    uint32  nSets;      // number of doodad sets
    rgb     ambientColor;
    ubyte   ambientX    <format=hex>;		
    uint32  WMO_ID;     // (column 2 in WMOAreaTable.dbc)
    float   boundingBox1[3];
    float   boundingBox2[3];
    uint32  padding;
} MOHD;


// MOMT - Materials
//--------------------------------------------------
typedef struct {
    UINT32 version;		
    UINT32 flags;		
    UINT32 blendMode;		
    UINT32 startNameIndex;		
    UINT32 color;  	 	//// old:  sidnColor[3];	// bullshit?	
  uint32 unknown;
  		
    UINT32 endNameIndex;		
    UINT32 frameSidnColor[3]<format=hex>;		
    UINT32 envNameIndex;
    float diffColor[3]<format=hex>; 		
    UINT32 groundType;		
    UINT32 hMaps;
} MOMT_Entry;

typedef struct {
    local int i=0;
    _chunk hdr;
    
    while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
        MOMT_Entry entry;
        i++;
    }    
} MOMT<read=MOMTRead>;
    string MOMTRead(MOMT &o) {
        string s;
        SPrintf( s, "%i Materials (prob. wrong structure)", o.i);
        return s;
    } 


// MOGI - WMO Group infos
typedef struct {
    UINT32      flags;  		
    Vector3D    bb1;
    Vector3D    bb2;		
    UINT32 nameoffset;    
} MOGI_Entry;

typedef struct {
    local int i=0;
    _chunk hdr;

    while( FTell() < (hdr.byte_size + hdr.myDataStart) ) {
        MOGI_Entry entry;
        i++;
    }
} MOGI<read=MOGIRead>; 
    string MOGIRead(MOGI &o) {
        string s;
        SPrintf( s, "%i WMO Sets", o.i);
        return s;
    } 

/*******************************************************
 *  3.  WMO File
*******************************************************/
struct  {
        MVER mver;  // version

//        fileList mmdx;  // model files
//        offsList mmid;  // str offsets

        // dirty lookahead .. 
        local int pos = FTell();

        if(nextChar()=='D') 
        {   // Root File
            MOHD            mohd;
            paddedFileList  motx;
            MOMT            momt;
            fileList        mogn;   // its not a file list .. but im lazy
            MOGI            mogi;
            unk_chunk       mosb;   // skybox - so they tell
        } else if(nextChar()=='P') 
        {   // Group File
            
        }        

} wmo_file;



/*******************************************************
 *  4. Helpers
*******************************************************/
    
    // im soo lazy
void SetStdColor() {
    SetColor( cBlack, cWhite );
}
    
    // whats comming next?
char nextChar() {
    return ReadByte(FTell());
}